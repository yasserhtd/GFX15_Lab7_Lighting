#version 330 core

// input data
in vec3 fragmentColor;
in vec3 position_worldspace;
in vec3 normal_worldspace;

uniform vec3 LightPosition_worldspace;
uniform vec3 EyePosition_worldspace;
uniform vec3 ambientLight;

// Ouput data
out vec3 color;
void main()
{

	// Diffuse light calculations.
	vec3 lightVector = normalize(LightPosition_worldspace - position_worldspace);
	float brightness = dot(lightVector,normal_worldspace);
	vec3 diffuseLight = vec3(brightness,brightness,brightness);
	diffuseLight = clamp(diffuseLight,0,1);

	//Specular light calculations.
	vec3 reflectedLightVector = reflect(-lightVector,normal_worldspace);
	vec3 eyeDirectionVector = normalize(EyePosition_worldspace - position_worldspace);
	float specularity = dot(reflectedLightVector,eyeDirectionVector);
	float specularExponent = 50;
	specularity = pow(specularity,specularExponent);
	vec3 specularLight = vec3(specularity,specularity,specularity);
	specularLight = clamp(specularLight,0,1);


	color = ambientLight + diffuseLight + specularLight;
}